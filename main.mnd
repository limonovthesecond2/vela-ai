const defendRange = 20    // Defend range
const repAppr = 4    // Repair approach distance
const repNotFar = 200    // Max repair distance
const vaultRange = 6    // Vault approach distance
const idleRange = 15    // Idle distance
const dangEnemy = 600    // Min hp of a dangerous enemy

UNIT = @vela
do
    ubind(UNIT)
    maxHp = @unit.maxHealth
    unitRange = @unit.range
    unitCap = @unit.itemCapacity
    isDead = @unit.dead
loop while isDead == 1    // Check if the unit is alive to make sure the variable values ​​are correct

maxRepHp = maxHp * 0.95    // Max hp to repair
minRepHp = maxHp * 0.55    // Min hp to repair
arcRange = unitRange * 1.2    // Approach range for manual control
attackRange = unitRange * 0.8    // Attack range to lose less enemy when shooting
unitApprRange = unitRange * 0.4    // Distance to approach the enemy if can't land

while true
    ubind(UNIT)
    isKamikaze = @unit.flag    // Use flag(1) to skip repair
    if isKamikaze == 0    // Unit repair logic
        hp = @unit.health
        if hp < maxRepHp
            ulocate(building, repair, false, repx, repy, building)
            power = building.totalPower
            if power > 0
                isNear = within(repx, repy, defendRange)
                if isNear == 1
                    approach(repx, repy, repAppr)
                    autoDefend(unitRange)
                    continue
                else
                    if hp <= minRepHp
                        isNotFar = within(repx, repy, repNotFar)
                        if isNotFar == 1
                            approach(repx, repy, repAppr)
                            boost(1)
                            continue
                        end
                    end
                end
            end
        end
    end

    items = @unit.totalItems
    if items < unitCap    // Bomb loading logic
        bombType = sorter1.config
        if bombType != null
            if vault1 != null
                vaulx = vault1.x
                vauly = vault1.y
                approach(vaulx, vauly, vaultRange)
                isNear = within(vaulx, vauly, defendRange)
                if isNear == 1
                    itemTake(vault1, bombType, unitCap)
                    autoDefend(unitRange)
                else
                    boost(1)
                end
                continue
            end
        end
    end

    flag(0)    // Reset flag
    isEnabled = switch1.enabled
    if isEnabled == 0    // Idle logic
        if vault1 == null    // If no vault, approach to this processor
            idlx = @this.x
            idly = @this.y
        else
            idlx = vault1.x
            idly = vault1.y
        end
        approach(idlx, idly, idleRange)
        isNear = within(idlx, idly, defendRange)
        if isNear == 1
            autoDefend(unitRange)
        else
            boost(1)
        end
        continue
    end

    def autoDefend(unitRange)
        enUnit = uradar(enemy, any, any, distance, 1)
        if enUnit != null
            boost(0)
            targetp(enUnit, 1)
        else
            ulocate(damaged, outx, outy, 0)
            isNear = within(outx, outy, unitRange)
            if isNear == 1
                boost(0)
                target(outx, outy, 1)
            else
                boost(1)    // If no targets nearby, fly to not swim in water or lava
            end
        end
    end

    // Attack logic
    enUnit = uradar(enemy, any, any, maxHealth, 1)
    if enUnit != null
        enMaxHp = enUnit.maxHealth
        if enMaxHp >= dangEnemy
            boost(0)
            targetp(enUnit, 1)
            enx = enUnit.x
            eny = enUnit.y
            isBoosted = @unit.boosting
            if isBoosted == 1
                approach(enx, eny, unitApprRange)
            else
                approach(enx, eny, attackRange)
            end
            continue
        end
    end
    enTurr = ulocate(building, turret, true, turx, tury, 0)
    if enTurr == 1
        isNear = within(turx, tury, unitRange)
        if isNear == 1
            autoAttack(turx, tury, unitRange)
            continue
        end
    end
    ulocate(building, core, true, corex, corey, 0)
    isNear = within(corex, corey, unitRange)
    if isNear == 1
        autoAttack(corex, corey, unitRange)
        continue
    end
    enGener = ulocate(building, generator, true, genx, geny, 0)
    if enGener == 1
        isNear = within(genx, geny, unitRange)
        if isNear == 1
            autoAttack(genx, geny, unitRange)
            continue
        end
    end

    def autoAttack(outx, outy, unitRange)
        boost(0)
        target(outx, outy, 1)
        isBoosted = @unit.boosting
        if isBoosted == 1    // Kamikaze attack if can't land
            move(outx, outy)
            flag(1)
        else
            approach(outx, outy, unitRange)
        end
    end

    controlled = arc1.controlled
    if controlled == 2    // Manual control
        arcx = arc1.shootX
        arcy = arc1.shootY
        isNear = within(arcx, arcy, arcRange)
        if isNear == 1
            isShooting = arc1.shooting
            if isShooting == 1
                boost(0)
                target(arcx, arcy, 1)
                isBoosted = @unit.boosting
                if isBoosted == 1
                    move(arcx, arcy)
                else
                    approach(arcx, arcy, attackRange)
                end
                continue
            end
        end
        boost(1)
        move(arcx, arcy)
        continue
    end

    autoPathfind()
    boost(1)
end
