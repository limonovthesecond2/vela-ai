const defendRange = 18    // Defend range
const repAppr = 2    // Repair approach distance
const repNotFar = 200    // Max repair distance
const vaultRange = 6    // Vault approach distance
const idleRange = 14    // Idle distance
const unitApprRange = 8    // Distance to approach the enemy if can't land
const nullPoint = -100    // Null point
const spawnRange = 60    // Enemy spawn range
const unitSearchRange = 5    // Search range of enemy units

ubind(@vela)
isKamikaze = @unit.flag    // Use flag(1) to skip repair
if isKamikaze == 0    // Unit repair logic
    hp = @unit.health
    maxRepHp = cell1[0]
    if hp < maxRepHp
        ulocate(building, repair, false, outx, outy, building)
        power = building.totalPower
        if power > 0
            isNear = within(outx, outy, defendRange)
            if isNear == 1
                approach(outx, outy, repAppr)
                autoDefend()
                end()
            else
                minRepHp = cell1[1]
                if hp <= minRepHp
                    isNotFar = within(outx, outy, repNotFar)
                    if isNotFar == 1
                        boost(1)
                        approach(outx, outy, repAppr)
                        end()
                    end
                end
            end
        end
    end
end

items = @unit.totalItems
unitCap = @unit.itemCapacity
if items < unitCap    // Bomb loading logic
    bombType = sorter1.config
    if bombType != null
        if vault1 != null
            outx = vault1.x
            outy = vault1.y
            approach(outx, outy, vaultRange)
            isNear = within(outx, outy, defendRange)
            if isNear == 1
                autoDefend()
                itemTake(vault1, bombType, unitCap)
                end()
            else
                boost(1)
                end()
            end
        end
    end
end

flag(0)    // Reset flag
isEnabled = cell1[21]
if isEnabled == 0    // Idle logic
    if vault1 == null    // If no vault, approach to this processor
        outx = @this.x
        outy = @this.y
    else
        outx = vault1.x
        outy = vault1.y
    end
    approach(outx, outy, idleRange)
    isNear = within(outx, outy, defendRange)
    if isNear == 1
        autoDefend()
        end()
    else
        boost(1)
        end()
    end
end

def autoDefend()
    enUnit = uradar(enemy, any, any, distance, 1)
    if enUnit != null
        boost(0)
        targetp(enUnit, 1)
        end()
    end
    unitRange = @unit.range
    enTurr = ulocate(building, turret, true, outx, outy, 0)
    if enTurr == 1
        targetBuilding(outx, outy, unitRange)
    end
    damAlly = ulocate(damaged, outx, outy, 0)
    if damAlly == 1
        targetBuilding(outx, outy, unitRange)
    end
    boost(1)    // If no enemy nearby, fly to not swim in water or lava

    def targetBuilding(outx, outy, unitRange)
        isNear = within(outx, outy, unitRange)
        if isNear == 1
            boost(0)
            target(outx, outy, 1)
            end()
        end
    end
end

// Auto attack logic
enUnit = uradar(enemy, any, any, maxHealth, 1)
if enUnit != null
    enMaxHp = enUnit.maxHealth
    dangEnemy = cell1[13]
    if enMaxHp >= dangEnemy
        boost(0)
        targetp(enUnit, 1)
        outx = enUnit.x
        outy = enUnit.y
        cell1[10] = outx
        cell1[11] = outy
        isBoosted = @unit.boosting
        if isBoosted == 1
            approach(outx, outy, unitApprRange)
            end()
        else
            attackRange = cell1[12]
            approach(outx, outy, attackRange)
            end()
        end
    end
end
unitRange = @unit.range
enTurr = ulocate(building, turret, true, outx, outy, 0)
if enTurr == 1
    autoAttack(outx, outy, unitRange)
end
enCore = ulocate(building, core, true, outx, outy, 0)
if enCore == 1
    autoAttack(outx, outy, unitRange)
end
enGener = ulocate(building, generator, true, outx, outy, 0)
if enGener == 1
    autoAttack(outx, outy, unitRange)
end

def autoAttack(outx, outy, unitRange)
    isNear = within(outx, outy, unitRange)
    if isNear == 1
        boost(0)
        target(outx, outy, 1)
        isBoosted = @unit.boosting
        if isBoosted == 1    // Kamikaze attack if can't land
            move(outx, outy)
            flag(1)
            end()
        else
            approach(outx, outy, unitRange)
            end()
        end
    end
end

isControll = arc1.controlled
if isControll == 2    // Manual controll
    outx = arc1.shootX
    outy = arc1.shootY
    apprRange = unitRange * 1.2
    isNear = within(outx, outy, apprRange)
    if isNear == 1
        isShooting = arc1.shooting
        if isShooting == 1
            boost(0)
            target(outx, outy, isShooting)
            isBoosted = @unit.boosting
            if isBoosted == 1
                move(outx, outy)
                flag(1)
                end()
            else
                attackRange = cell1[12]
                approach(outx, outy, attackRange)
                end()
            end
        else
            boost(1)
            move(outx, outy)
            end()
        end
    end
    boost(1)
    approach(outx, outy, unitRange)
    end()
end

gameMode = cell1[20]
if gameMode == 0
    boost(1)
    autoPathfind()
    end()
else
    outx = cell1[10]
    if outx == nullPoint    // Approach to spawn if no enemy units found
        autoPathfind()
        enSpawn = ulocate(spawn, outx, outy, 0)
        if enSpawn == 1
            isNear = within(outx, outy, spawnRange)
            if isNear == 1
                unitX = @unit.x
                unitY = @unit.y
                getBlock(unitX, unitY, 0, 0, floor)    // Check floor under unit
                if floor != @deep-water
                    if floor != @molten-slag
                        boost(0)    // Landing for repairs
                        target(0, 0, 0)    // Make unit not fire at last target
                        end()
                    end
                end
            end
        end
        boost(1)
        end()
    else
        outy = cell1[11]
        boost(1)
        move(outx, outy)    // Approach to enemy unit
        isNear = within(outx, outy, unitSearchRange)
        if isNear != 1
            end()
        else
            cell1[10] = nullPoint    // If code reached this point, there are no enemy units around
        end
    end
end
