#set target = ML7AS;    // Mindcode Logic version 7 (revision A) standard processors
#set remarks = active;    // Remarks (///) are included in the compiled code and are executed

param unit = @vela;    /// Possible units: @vela, @quasar, @pulsar and @nova
param repAppr = 4;    /// Approach distance to repair turret
param maxRepDist = 200;    /// Maximum distance to repair turret
param vaultAppr = 6;    /// Approach distance to vault during bomb loading
param idleAppr = 15;    /// Approach distance to vault when logic is idle
param angleChange = 30;    /// Angle change in carousel logic
param defDist = 20;    /// Defense range during repairs, bomb loading and idle

do
    ubind(unit);
    maxHp = @unit.@maxHealth;
    UNITRANGE = @unit.@range;
    unitCap = @unit.@itemCapacity;
    isDead = @unit.@dead;
loop while isDead == 1;    // Check if the unit is alive to make sure the variable values ​​are correct

minRepHp = maxHp * 0.55;    /// Minimum health for repair
maxRepHp = maxHp * 0.98;    /// Maximum health for repair
dangEnemy = maxHp * 0.068;    /// Minimum health of a dangerous enemy
enUnitAppr = UNITRANGE * 0.9;    /// Approach distance for attacking enemy units
enBuildDist = UNITRANGE * 1.5;    /// Attack range to enemy buildings

while true do
    ubind(unit);

    // Repair logic
    unitFlag = @unit.@flag;
    if unitFlag == 0 then
        hp = @unit.@health;
        if hp < maxRepHp then
            repTurr = ulocate(building, repair, false, out repX, out repY);
            repPower = repTurr.@totalPower;
            if repPower > 0 then
                isNear = within(repX, repY, defDist);
                if isNear == 1 then
                    approach(repX, repY, repAppr);
                    autoDef();
                    continue;
                elsif hp <= minRepHp then
                    isRepNear = within(repX, repY, maxRepDist);
                    if isRepNear == 1 then
                        approach(repX, repY, repAppr);
                        boost(1);
                        continue;
                    end;
                end;
            end;
        end;
    end;

    // Bomb loading logic
    items = @unit.@totalItems;
    if items < unitCap then
        bombType = sorter1.@config;
        if bombType != null then
            if vault1 != null then
                vaultX = vault1.@x;
                vaultY = vault1.@y;
                approach(vaultX, vaultY, vaultAppr);
                isNear = within(vaultX, vaultY, defDist);
                if isNear == 1 then
                    itemTake(vault1, bombType, unitCap);
                    autoDef();
                else
                    boost(1);
                end;
                continue;
            end;
        end;
    end;

    flag(0);    // Reset flag

    // Idle logic
    isEnabled = switch1.@enabled;
    if isEnabled == 0 then
        if vault1 == null then    // If there is no vault, approach to this processor
            idleX = @this.@x;
            idleY = @this.@y;
        else
            idleX = vault1.@x;
            idleY = vault1.@y;
        end;

        // Carousel logic
        unitX = @unit.@x;
        unitY = @unit.@y;
        vectorX = unitX - idleX;
        vectorY = unitY - idleY;
        angle = angle(vectorX, vectorY);
        angle += angleChange;
        moveX = cos(angle);
        moveY = sin(angle);
        moveX *= idleAppr;
        moveY *= idleAppr;
        moveX += idleX;
        moveY += idleY;
        move(moveX, moveY);

        isNear = within(idleX, idleY, defDist);
        if isNear == 1 then
            autoDef();
        else
            boost(1);
        end;
        continue;
    end;

    // Attack logic
    enUnit = uradar(enemy, any, any, maxHealth, 1);
    if enUnit != null then
        enMaxHp = enUnit.@maxHealth;
        if enMaxHp >= dangEnemy then
            boost(0);
            targetp(enUnit, 1);
            enemyX = enUnit.@x;
            enemyY = enUnit.@y;
            approach(enemyX, enemyY, enUnitAppr);
            continue;
        end;
    end;
    ulocate(building, turret, true, out turretX, out turretY, out enTurr);
    if enTurr == 1 then
        isNear = within(turretX, turretY, enBuildDist);
        if isNear == 1 then
            attackBuilding(turretX, turretY);
            continue;
        end;
    end;
    ulocate(building, core, true, out coreX, out coreY);
    isNear = within(coreX, coreY, enBuildDist);
    if isNear == 1 then
        attackBuilding(coreX, coreY);
        continue;
    end;
    ulocate(building, generator, true, out genX, out genY, out enGener);
    if enGener == 1 then
        isNear = within(genX, genY, enBuildDist);
        if isNear == 1 then
            attackBuilding(genX, genY);
            continue;
        end;
    end;

    // Manual control logic
    controlled = arc1.@controlled;
    if controlled == 2 then
        arcX = arc1.@shootX;
        arcY = arc1.@shootY;
        isNear = within(arcX, arcY, enBuildDist);
        if isNear == 1 then
            isShooting = arc1.@shooting;
            if isShooting == 1 then
                boost(0);
                target(arcX, arcY, 1);
                isBoosted = @unit.@boosting;
                if isBoosted == 1 then
                    move(arcX, arcY);
                else
                    approach(arcX, arcY, enUnitAppr);
                end;
                continue;
            end;
        end;
        move(arcX, arcY);
        boost(1);
        continue;
    end;

    // Fly to the nearest enemy base
    autoPathfind();
    boost(1);
end;

// Automatic defense against enemy units and repair of neighboring allied buildings
void autoDef()
    enUnit = uradar(enemy, any, any, distance, 1);
    if enUnit != null then
        boost(0);
        targetp(enUnit, 1);
    else
        ulocate(damaged, out outX, out outY);
        isNear = within(outX, outY, UNITRANGE);
        if isNear == 1 then
            boost(0);
            target(outX, outY, 1);
        else
            boost(1);    // If there are no targets nearby, fly instead of swim
        end;
    end;
end;

// Attack the enemy building
void attackBuilding(outX, outY)
    boost(0);
    target(outX, outY, 1);
    isBoosted = @unit.@boosting;
    if isBoosted == 1 then    // Kamikaze attack if can't land
        move(outX, outY);
        flag(1);
    else
        approach(outX, outY, UNITRANGE);
    end;
end;
