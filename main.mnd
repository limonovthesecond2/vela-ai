const defendRange = 18    // Defend range
const repAppr = 2    // Repair approach distance
const repNotFar = 200    // Max repair distance
const vaultRange = 6    // Vault approach distance
const idleRange = 14    // Idle distance
const unitApprRange = 8    // Distance to approach the enemy if can't land
const nullPoint = -100    // Null point
const spawnRange = 60    // Enemy spawn range
const unitSearchRange = 5    // Search range of enemy units in Survival mode

UNIT = @vela
do
    ubind(UNIT)
    unitCap = @unit.itemCapacity
    maxHp = @unit.maxHealth
    UNITRANGE = @unit.range
    isDead = @unit.dead
loop while isDead == 1    // Check if the unit is alive to make sure the variable values ​​are correct

maxRepHp = maxHp * 0.9    // Max hp to repair
minRepHp = maxHp * 0.5    // Min hp to repair
apprRange = UNITRANGE * 1.2    // Approach range with manual control
attackRange = UNITRANGE * 0.8    // Closer than unitRange to not lose enemy when shooting

while true
    ubind(UNIT)
    isKamikaze = @unit.flag    // Use flag(1) to skip repair
    if isKamikaze == 0    // Unit repair logic
        hp = @unit.health
        if hp < maxRepHp
            ulocate(building, repair, false, outx, outy, building)
            power = building.totalPower
            if power > 0
                isNear = within(outx, outy, defendRange)
                if isNear == 1
                    approach(outx, outy, repAppr)
                    autoDefend()
                    continue
                else
                    if hp <= minRepHp
                        isNotFar = within(outx, outy, repNotFar)
                        if isNotFar == 1
                            boost(1)
                            approach(outx, outy, repAppr)
                            continue
                        end
                    end
                end
            end
        end
    end

    items = @unit.totalItems
    if items < unitCap    // Bomb loading logic
        bombType = sorter1.config
        if bombType != null
            if vault1 != null
                outx = vault1.x
                outy = vault1.y
                approach(outx, outy, vaultRange)
                isNear = within(outx, outy, defendRange)
                if isNear == 1
                    itemTake(vault1, bombType, unitCap)
                    autoDefend()
                else
                    boost(1)
                end
                continue
            end
        end
    end

    flag(0)    // Reset flag
    isEnabled = switch1.enabled
    if isEnabled == 0    // Idle logic
        if vault1 == null    // If no vault, approach to this processor
            outx = @this.x
            outy = @this.y
        else
            outx = vault1.x
            outy = vault1.y
        end
        approach(outx, outy, idleRange)
        isNear = within(outx, outy, defendRange)
        if isNear == 1
            autoDefend()
        else
            boost(1)
        end
        continue
    end

    def autoDefend()
        enUnit = uradar(enemy, any, any, distance, 1)
        if enUnit != null
            boost(0)
            targetp(enUnit, 1)
        else
            ulocate(damaged, outx, outy, 0)
            isNear = within(outx, outy, UNITRANGE)
            if isNear == 1
                boost(0)
                target(outx, outy, 1)
            else
                boost(1)    // If no targets nearby, fly to not swim in water or lava
            end
        end
    end

    // Auto attack logic
    enUnit = uradar(enemy, any, any, maxHealth, 1)
    if enUnit != null
        enMaxHp = enUnit.maxHealth
        dangEnemy = cell1[2]
        if enMaxHp >= dangEnemy
            boost(0)
            targetp(enUnit, 1)
            outx = enUnit.x
            outy = enUnit.y
            cell1[0] = outx
            cell1[1] = outy
            isBoosted = @unit.boosting
            if isBoosted == 1
                approach(outx, outy, unitApprRange)
            else
                approach(outx, outy, attackRange)
            end
            continue
        end
    end
    enTurr = ulocate(building, turret, true, outx, outy, 0)
    if enTurr == 1
        isNear = within(outx, outy, UNITRANGE)
        if isNear == 1
            autoAttack(outx, outy)
            continue
        end
    end
    enCore = ulocate(building, core, true, outx, outy, 0)
    if enCore == 1
        isNear = within(outx, outy, UNITRANGE)
        if isNear == 1
            autoAttack(outx, outy)
            continue
        end
    end
    enGener = ulocate(building, generator, true, outx, outy, 0)
    if enGener == 1
        isNear = within(outx, outy, UNITRANGE)
        if isNear == 1
            autoAttack(outx, outy)
            continue
        end
    end

    def autoAttack(outx, outy)
        boost(0)
        target(outx, outy, 1)
        isBoosted = @unit.boosting
        if isBoosted == 1    // Kamikaze attack if can't land
            move(outx, outy)
            flag(1)
        else
            approach(outx, outy, UNITRANGE)
        end
    end

    isControll = arc1.controlled
    if isControll == 2    // Manual controll
        outx = arc1.shootX
        outy = arc1.shootY
        isNear = within(outx, outy, apprRange)
        if isNear == 1
            isShooting = arc1.shooting
            if isShooting == 1
                boost(0)
                target(outx, outy, 1)
                isBoosted = @unit.boosting
                if isBoosted == 1
                    move(outx, outy)
                    flag(1)
                else
                    approach(outx, outy, attackRange)
                end
            else
                boost(1)
                move(outx, outy)
            end
        else
            boost(1)
            approach(outx, outy, UNITRANGE)
        end
        continue
    end

    gameMode = cell1[10]
    if gameMode == 0
        boost(1)
        autoPathfind()
        continue
    else
        outx = cell1[0]
        if outx == nullPoint    // Approach to spawn if no enemy units found
            autoPathfind()
            ulocate(spawn, outx, outy, 0)
            isNear = within(outx, outy, spawnRange)
            if isNear == 1
                unitX = @unit.x
                unitY = @unit.y
                getBlock(unitX, unitY, 0, 0, floor)    // Check floor under unit
                if floor != @deep-water
                    if floor != @deep-tainted-water
                        if floor != @molten-slag
                            if floor != @tar
                                if floor != @pooled-cryofluid
                                    boost(0)    // Landing for repairs
                                    target(0, 0, 0)    // Make unit not fire at last target
                                    continue
                                end
                            end
                        end
                    end
                end
            end
            boost(1)
        else
            outy = cell1[1]
            boost(1)
            move(outx, outy)    // Approach to last found enemy unit
            isNear = within(outx, outy, unitSearchRange)
            if isNear == 1
                cell1[0] = nullPoint    // If code reached this point, there are no enemy units around
            end
        end
        continue
    end
end
